<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://afahadabdullah.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://afahadabdullah.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-04-10T20:45:05+06:00</updated><id>https://afahadabdullah.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Detrend a Timeseries in Python</title><link href="https://afahadabdullah.github.io/blog/2019/DETREND_A_TIMESERIES/" rel="alternate" type="text/html" title="Detrend a Timeseries in Python"/><published>2019-07-29T00:00:00+06:00</published><updated>2019-07-29T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2019/DETREND_A_TIMESERIES</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2019/DETREND_A_TIMESERIES/"><![CDATA[<p>Let’s say if we have sea level pressure variable with 38 years of data that has 360 longitude and 180 latitude. First will import <code class="language-plaintext highlighter-rouge">scipy</code> package in our python library.</p> <p>example pip install cmd: <code class="language-plaintext highlighter-rouge">python -m pip install --user numpy scipy</code></p> <p>For more follow this <a href="https://scipy.org/install/">link</a></p> <p>Now example script for detrending:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">signal</span></code></pre></figure> <p>Now read the data. For example I’m using SLP</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">slp</span><span class="p">.</span><span class="n">shape</span>
<span class="o">&gt;</span> <span class="p">(</span><span class="mi">38</span><span class="p">,</span><span class="mi">180</span><span class="p">,</span><span class="mi">360</span><span class="p">)</span> <span class="c1">#time, lat, lon</span></code></pre></figure> <p>Now use signal function to detrend the variable:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">slp_detrended</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">slp</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lat</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lon</span><span class="p">)):</span>
        <span class="n">slp_detrended</span><span class="p">[:,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span><span class="o">=</span> <span class="n">signal</span><span class="p">.</span><span class="nf">detrend</span><span class="p">(</span><span class="n">slp</span><span class="p">[:,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">])</span></code></pre></figure> <p><strong>What is data detrending:</strong> Detrending is <strong>removing a <a href="https://www.statisticshowto.datasciencecentral.com/trend-analysis/">trend</a> from a <a href="https://www.statisticshowto.datasciencecentral.com/timeplot/">time series</a></strong>; a trend usually refers to a change in the mean over time. When you detrend data, you remove an aspect from the data that you think is causing some kind of distortion. For example, you might detrend data that shows an overall increase, in order to see subtrends. Usually, these subtrends are seen as fluctuations on a time series graph. <a href="https://www.statisticshowto.datasciencecentral.com/detrend-data/">source</a></p>]]></content><author><name>Abdullah Al Fahad</name></author><summary type="html"><![CDATA[To find inter-annual variability and correlation between two time series variable that excludes the influence of external forcing (i.e. global warming), we might want to detrend the time series of variables. For detrending, we will use scipy package of python.]]></summary></entry><entry><title type="html">AOESpy, Python Toolbox for Climate Data Analysis</title><link href="https://afahadabdullah.github.io/blog/2019/aoespy/" rel="alternate" type="text/html" title="AOESpy, Python Toolbox for Climate Data Analysis"/><published>2019-07-06T00:00:00+06:00</published><updated>2019-07-06T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2019/aoespy</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2019/aoespy/"><![CDATA[<h2 id="github"><a href="https://github.com/afahadabdullah/AOESpy">GitHub</a></h2> <h2 id="aoespy">AOESpy</h2> <p>AOESpy (v1) Author@ Abdullah al Fahad (afahad@gmu.edu) http://afahadabdullah.com</p> <p><strong>Cite as:</strong> Abdullah Al Fahad. (2022). afahadabdullah/AOESpy: v1.0.0 (v1.0.0). Zenodo. <a href="https://doi.org/10.5281/zenodo.6100762">https://doi.org/10.5281/zenodo.6100762</a></p> <p><strong>Please Fill up the form to get future AOESpy and Python for climate science updates.</strong> <a href="https://docs.google.com/forms/d/e/1FAIpQLSeMGsFau4Upuy096Qsg89gIEdMJWb-LoXj2TJsypdBO5dCYyg/viewform">form link</a></p> <h2 id="dependency-library">Dependency Library</h2> <p><code class="language-plaintext highlighter-rouge">python 3+</code> <code class="language-plaintext highlighter-rouge">Numpy</code> <code class="language-plaintext highlighter-rouge">Scipy</code> <code class="language-plaintext highlighter-rouge">mpl_toolkits.basemap</code> <code class="language-plaintext highlighter-rouge">Matplotlib</code> <code class="language-plaintext highlighter-rouge">netCDF4</code></p> <h2 id="setup">Setup</h2> <p>from terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; cd /homes/afahad/ #use your setup directory here
&gt; wget https://github.com/afahadabdullah/AOESpy/archive/master.zip
&gt; unzip master.zip
&gt; cd AOESpy-master
</code></pre></div></div> <p><strong>list the directory to see if all 3 files are present</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; ls
aoespy.py  README.md  setup.sh
</code></pre></div></div> <h2 id="load-function">Load function</h2> <p><strong>In ipython IDLE 3.0+ (Spyder, Jupyter Notebook. …… or the good ol’ ipython terminal)</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wdir="/homes/afahad/"
import os
os.chdir("/homes/afahad/AOESpy-master/")
import aoespy as ap
os.chdir(wdir)

.
..
...
</code></pre></div></div> <h2 id="functions">Functions</h2> <h3 id="read-netcdf-data-rnc">Read netcdf data: rnc</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data=rnc(var,file)

inputs:	var= string variable name that needs to be read
		file=string file path

outputs:	data= data read from the file
</code></pre></div></div> <h3 id="linear-trend-ltrend">Linear Trend: ltrend</h3> <p>vart, varp=ltrend(var,lon,lat,time,sig=False)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inputs:	var= variable as 3D [time,lat,lon] or 2D [time,lat*lon]
		lon=lon array
		lat=lat array
		time=time array
		sig= alpha significance value (e.g. 0.05, 0.1), if given the output data
		will have nan values in insignificant points (default False)

outputs:	#vart= linear trend of the variable along time dimension
			#varp= P value of the trend		           
</code></pre></div></div> <h3 id="mapping-function-plot">Mapping function: plot</h3> <p>plot(var,lon,lat,title=’‘,clf=[],cl=[], cmap=’coolwarm’,lon1=-180,lon2=180,lat1=-90,lat2=90,bar=1,p=1,m=1)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inputs: 	var= 2D variable that will be plotted
		lon=lon lat=lat title='title' clf= array of filled contoured levels cl= array of contoured levels (optional) cmap= string of name of colorbar (default coolwarm, for list: matplotlib colorbars) lon1= start of lon (default -180) lon2= end of lon (default 180) lat1= start of lat (default -90) lat2= end of lat (default 90) bar= 1 (default) to plot colorbar; or 0 doesn't plot colorbar in figure p= 1 (default) plots parallel line, or 0 doesn't plot m= 1 (default) plots meridioinal line, or 0 doesn't plot
</code></pre></div></div> <h3 id="3d-seasonal-decompose-from-monthly-time-dimensions-to-annual-djf-mam-jja-son-season">3D seasonal decompose from monthly time dimensions to annual, DJF, MAM, JJA, SON: season</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ann, djf,mam,jja,son= season(data,lon,lat,time)

inputs:	data=3D data [time lat lon]
		lon=lon
		lat=lat
		time=time

outputs:	ann= annual mean
		djf= DJF mean
		mam= MAM mean
		jja= JJA mean
		son= SON mean
</code></pre></div></div> <h3 id="1d-seasonal-decompose-from-monthly-time-dinemsions-to-annual-djf-mam-jja-son-season1d">1D seasonal decompose from monthly time dinemsions to annual, DJF, MAM, JJA, SON: season1d</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ann, djf,mam,jja,son= season1d(data,time)

inputs:	data=1D data [time]
		time=time

outputs:	ann= annual mean
		djf= DJF mean
		mam= MAM mean
		jja= JJA mean
		son= SON mean
</code></pre></div></div> <h3 id="interpolates-data-in-desired-grid-interp">interpolates data in desired grid: interp</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data_interp=interp(var, lon, lat, new_lons, new_lats,time=arange(1))

inputs:	var= input variable 2D or 3D (includes time dimension)
		lon= lon of the variable
		lat= lat of the variable
		new_lons= new lon that grid needs to be shifted to
		new_lats= new lat that grid needs to be shifted to
		time= (optional)

outputs:	data_interp= intrepolated data to new grids
</code></pre></div></div> <h3 id="write-variables-in-netcdf-output-this-function-can-write-upto-2-variables-in-one-file-and-required-dimensions-wnc">write variables in netcdf output. This function can write upto 2 variables in one file and required dimensions: wnc</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wnc(x,y,data_out1,var1='data1',data_out2=array([1]),var2='data2',t=array([1]),e=array([1]),file='output')

inputs:	x=lon
	           	y=lat
     	data_out1=first variable to write in file
           	var1='data1' ; first varible name assigned in the file
           	data_out2=second variable to write in file; (optional) var2='data2'; first varible name assigned in the file (if second variable is given to write)
          	 t= time dimension array
           	e= ensemble dimension array (can be used as vertical level)
           	file= string of output file name (dont need to add .nc)
</code></pre></div></div> <h3 id="convert-vertical-pressure-levels-to-geometric-height-p2h">convert vertical pressure levels to geometric height: p2h</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> H = p2h(T,slp,P)

    #equation from Hypsometric
    # H= z2-z1= R*T/g * ln(P0/P)
    # H= Height
    # g=9.81 m/s2
    # R=287.04 J K-1 kg-1

inputs:	T = air temperature one array (Kelvin) SLP = sea level pressure one array (hPa)
     	 P = Pressure level that needs to be converted in to height (hPa)

outputs:   	H = Height (meters)

#example:       #h=zeros(ta.shape)

                # for i in range(len(lev)):
                #     for j in range(len(lat)):
                #         for k in range(len(lon)):
                #             h[i,j,k]=p2h(T[i,j,k],slp[j,k],P[i])
</code></pre></div></div> <h3 id="static-stability-buyoncy-frequency-n2-n2">static stability (buyoncy frequency N2): N2</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> N2, pn = N2(ta,slp,plev,lon,lat)

inputs:   	 ta = air temperature (Kelvin) (3D [time, lat, lon])
		slp= sea level pressure (hPa) (2D [lat, lon])
		plev= pressure level (hPa) (1D vertical array)

outputs:   	N2= static stability (s^-2) pn= new pressure level (hPa)
</code></pre></div></div> <h3 id="customized-colormap">customized colormap</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cmap()
</code></pre></div></div> <h3 id="this-function-takes-two-time-series-x-1d-y-3d-and-output-gives-y-removing-the-x-signal">This function takes two time series (x 1D, y 3D) and output gives y removing the x signal</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deregress(x,y,lon=[],lat=[])
</code></pre></div></div> <h2 id="other-handly-functions">Other handly functions</h2> <h3 id="d">d()</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     displays plot based on matplotlib.pyplot
</code></pre></div></div> <h3 id="f">f()</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  	 an output default figure size
</code></pre></div></div> <h3 id="shiftgrid">shiftgrid</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dataout, newlon= shiftgrid(lon0, datain, lonsin, start=True, cyclic=360.0)

inputs: 	lon0=starting longitude for shifted grid (ending longitude if start=False)
		datain= original data with longitude the right-most dimension.
		lonsin= original longitudes
		start= if True, lon0 represents the starting longitude of the new         
               			grid. if False, lon0 is the ending longitude. Default True.
		cyclic=	width of periodic domain (default 360)

outputs:	dataout= shifted input data
		newlon= new shifted longitude array
</code></pre></div></div>]]></content><author><name>Abdullah Al Fahad</name></author><category term="Tutorial"/><category term="Python"/><summary type="html"><![CDATA[A complete toolbox for beginners in python that uses python 3+ functions from plotting climate data to basic statistical analysis. Details of the project is posted in the Github.]]></summary></entry><entry><title type="html">Python for Climate Science Tutorial</title><link href="https://afahadabdullah.github.io/blog/2019/python_tutorial/" rel="alternate" type="text/html" title="Python for Climate Science Tutorial"/><published>2019-07-06T00:00:00+06:00</published><updated>2019-07-06T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2019/python_tutorial</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2019/python_tutorial/"><![CDATA[<p>Updated Version <a href="https://drive.google.com/file/d/1lz7SFmQLdmSV6mUImdiH9p_WKIdBQ-dT/view">Goole Drive Link of PDF </a></p>]]></content><author><name>Abdullah Al Fahad</name></author><category term="Tutorial"/><category term="Python"/><summary type="html"><![CDATA[A basic python tutorial for Climate Science using numpy, Matplotlib, and AOESpy]]></summary></entry><entry><title type="html">Download Climate Data</title><link href="https://afahadabdullah.github.io/blog/2018/download-climate-data/" rel="alternate" type="text/html" title="Download Climate Data"/><published>2018-10-29T00:00:00+06:00</published><updated>2018-10-29T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/download-climate-data</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/download-climate-data/"><![CDATA[<h3 id="noaa-earth-system-research-laboratory">NOAA, Earth System Research Laboratory</h3> <p><a href="https://psl.noaa.gov/data/gridded/">List of Dataset1</a></p> <p><a href="https://www.ncdc.noaa.gov/cdo-web/datasets">List of Dataset2</a></p> <p>Instead of clicking every single year file to download, python script can be used as:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">urllib.request</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1979</span><span class="p">,</span><span class="mi">2018</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">'donwloading year'</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
<span class="nb">file</span><span class="o">=</span><span class="s">'ftp://ftp.cdc.noaa.gov/Datasets/ncep.reanalysis.dailyavgs/surface/slp.'</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">'.nc'</span>
<span class="n">data</span><span class="o">=</span><span class="s">'slp.'</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">'.nc'</span>
<span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlretrieve</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span></code></pre></figure> <p>This script downloads SLP daily data from 1979 to 2017 without clicking all files one by one.</p> <h3 id="ecmwf-european-centre-for-medium-range-weather-forecasts">ECMWF, European Centre for Medium-Range Weather Forecasts</h3> <p><a href="https://www.ecmwf.int/en/forecasts/datasets">List of all Dataset</a></p> <p>Example python script for downloading from ECMWF:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">ecmwfapi</span> <span class="kn">import</span> <span class="n">ECMWFDataServer</span>
<span class="kn">from</span> <span class="n">numpy</span> <span class="kn">import</span><span class="o">*</span>
<span class="n">server</span> <span class="o">=</span> <span class="nc">ECMWFDataServer</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1979</span><span class="p">,</span><span class="mi">2018</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">dat</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">"-04-01/to/"</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">"-09-30"</span>
    <span class="n">tar</span><span class="o">=</span><span class="s">"slp_era"</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s">".nc"</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">retrieve</span><span class="p">({</span>
        <span class="s">"class"</span><span class="p">:</span> <span class="s">"ei"</span><span class="p">,</span>
        <span class="s">"dataset"</span><span class="p">:</span> <span class="s">"interim"</span><span class="p">,</span>
        <span class="s">"date"</span><span class="p">:</span> <span class="n">dat</span><span class="p">,</span>
        <span class="s">"expver"</span><span class="p">:</span> <span class="s">"1"</span><span class="p">,</span>
        <span class="s">"grid"</span><span class="p">:</span> <span class="s">"1/1"</span><span class="p">,</span>
        <span class="s">"levtype"</span><span class="p">:</span> <span class="s">"sfc"</span><span class="p">,</span>
        <span class="s">"param"</span><span class="p">:</span> <span class="s">"151.128"</span><span class="p">,</span>
        <span class="s">"step"</span><span class="p">:</span> <span class="s">"0"</span><span class="p">,</span>
        <span class="s">"stream"</span><span class="p">:</span> <span class="s">"oper"</span><span class="p">,</span>
        <span class="s">"time"</span><span class="p">:</span> <span class="s">"00:00:00/06:00:00/12:00:00/18:00:00"</span><span class="p">,</span>
        <span class="s">"type"</span><span class="p">:</span> <span class="s">"an"</span><span class="p">,</span>
        <span class="s">"area"</span><span class="p">:</span> <span class="s">"0/-180/-90/180"</span><span class="p">,</span>
        <span class="s">"format"</span> <span class="p">:</span> <span class="s">"netcdf"</span><span class="p">,</span>
        <span class="s">"target"</span> <span class="p">:</span><span class="n">tar</span><span class="p">,</span>
    <span class="p">})</span></code></pre></figure> <p><a href="https://confluence.ecmwf.int//display/WEBAPI/Access+ECMWF+Public+Datasets">For details how to download using webAPI</a></p> <h3 id="ncar-national-center-for-atmospheric-research">NCAR, National Center for Atmospheric Research</h3> <p><a href="https://rda.ucar.edu/lookfordata/">List of all Dataset</a></p> <h3 id="usa-gov-data">USA Gov Data</h3> <p><a href="https://catalog.data.gov/dataset">List of all Dataset</a></p> <h3 id="international-research-institute-for-climate--society">International Research Institute for Climate &amp; Society</h3> <p>The IRI Data Library is a powerful and freely accessible online data repository and analysis tool that allows a user to view, analyze, and download hundreds of terabytes of climate-related data through a standard web browser.</p> <p><a href="http://iridl.ldeo.columbia.edu/">List of all Dataset</a></p> <h3 id="nasa-earthdata">NASA, EARTHDATA</h3> <p><a href="https://www.earthdata.nasa.gov/learn/get-started">Earth Observation Data</a></p>]]></content><author><name>Abdullah Al Fahad</name></author><category term="Data_Handling"/><category term="Data"/><summary type="html"><![CDATA[List of different climate data sources and their uses]]></summary></entry><entry><title type="html">Useful Research Software</title><link href="https://afahadabdullah.github.io/blog/2018/useful_software/" rel="alternate" type="text/html" title="Useful Research Software"/><published>2018-10-20T00:00:00+06:00</published><updated>2018-10-20T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/useful_software</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/useful_software/"><![CDATA[<div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/dash-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/dash-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/dash-1400.webp"/> <img src="/assets/img/useful%20software/dash.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/evernote-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/evernote-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/evernote-1400.webp"/> <img src="/assets/img/useful%20software/evernote.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/forest-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/forest-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/forest-1400.webp"/> <img src="/assets/img/useful%20software/forest.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/lyx-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/lyx-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/lyx-1400.webp"/> <img src="/assets/img/useful%20software/lyx.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/men-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/men-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/men-1400.webp"/> <img src="/assets/img/useful%20software/men.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/sublime-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/sublime-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/sublime-1400.webp"/> <img src="/assets/img/useful%20software/sublime.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/cyber-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/cyber-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/cyber-1400.webp"/> <img src="/assets/img/useful%20software/cyber.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/coggle-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/coggle-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/coggle-1400.webp"/> <img src="/assets/img/useful%20software/coggle.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/useful%20software/anaconda-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/useful%20software/anaconda-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/useful%20software/anaconda-1400.webp"/> <img src="/assets/img/useful%20software/anaconda.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="Software"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Color maps in Matplotlib and creating own color bar</title><link href="https://afahadabdullah.github.io/blog/2018/Color_maps_in_Matplotlib/" rel="alternate" type="text/html" title="Color maps in Matplotlib and creating own color bar"/><published>2018-10-18T00:00:00+06:00</published><updated>2018-10-18T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/Color_maps_in_Matplotlib</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/Color_maps_in_Matplotlib/"><![CDATA[<p>For python/ipython module, Matplotlib offers a long list of sequential to diverging colormaps. We can change the colormap in previous example as:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">csf</span> <span class="o">=</span> <span class="nb">map</span><span class="p">.</span><span class="nf">contourf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">clevsf</span><span class="p">,</span><span class="n">extend</span><span class="o">=</span><span class="s">'both'</span><span class="p">,</span><span class="n">cmap</span><span class="o">=</span><span class="s">'coolwarm'</span><span class="p">)</span>
<span class="c1"># filled contour</span></code></pre></figure> <p>“coolwarm” is a diverging colormap that is useful to show positive and negative data points in a graph (i.e. anomalies).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/colorbar-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/colorbar-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/colorbar-1400.webp"/> <img src="/assets/img/colorbar.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Divergent colormaps </div> <p>For list of colormaps in Matplotlib <a href="https://matplotlib.org/2.0.2/examples/color/colormaps_reference.html">follow this link</a></p> <p>If we want to make a specific color map for our plot which is not available in Matplotlib list, we will need to install colormap and easydev python package package. For installing package in anaconda follow this link. Alternatively, we can also install the package using pip as:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pip</span> <span class="n">install</span> <span class="n">colormap</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">easydev</span></code></pre></figure> <p>For example if we want to make a sequential gradient colormap that will start from white to blue and end with dark blue,</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">colormap</span> <span class="kn">import</span> <span class="n">Colormap</span>
<span class="n">c</span> <span class="o">=</span> <span class="nc">Colormap</span><span class="p">()</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">cmap_linear</span><span class="p">(</span><span class="s">'white'</span><span class="p">,</span><span class="s">'SkyBlue'</span><span class="p">,</span><span class="s">'royalblue'</span><span class="p">)</span></code></pre></figure> <p>Now test the colormap by typing: <code class="language-plaintext highlighter-rouge">cmap = c.test_colormap(cmap)</code></p> <p>We should get a test map like this:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/colorbar2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/colorbar2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/colorbar2-1400.webp"/> <img src="/assets/img/colorbar2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Now we can use this color map for our plot as before in Matplotlib plot, except we don’t have to use the quote in syntax</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">csf</span> <span class="o">=</span> <span class="nb">map</span><span class="p">.</span><span class="nf">contourf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">clevsf</span><span class="p">,</span><span class="n">extend</span><span class="o">=</span><span class="s">'both'</span><span class="p">,</span><span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>
<span class="c1"># cmap using colormap that we just made.</span></code></pre></figure> <p>List of color that colormap module use attached in the <a href="https://drive.google.com/file/d/1oRYc-NrDq_rDy7mOfayJV3PIYYMJtJ4x/view">color.txt</a> file. We can try different combination of colors to make customized colormap.</p> <p>For more details about customized colormap and colormap module <a href="https://colormap.readthedocs.io/en/latest/#">follow this link</a>.</p>]]></content><author><name>Abdullah Al Fahad</name></author><summary type="html"><![CDATA[Color maps are important to clarify the scientific plots better. Better color bar can help to make interesting and self explanatory Graph and Maps.]]></summary></entry><entry><title type="html">Handling netCDF File Format</title><link href="https://afahadabdullah.github.io/blog/2018/handling_ncfile/" rel="alternate" type="text/html" title="Handling netCDF File Format"/><published>2018-10-18T00:00:00+06:00</published><updated>2018-10-18T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/handling_ncfile</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/handling_ncfile/"><![CDATA[<h3 id="bash-commands">Bash commands</h3> <ul> <li> <p>See data that nc file contains: <code class="language-plaintext highlighter-rouge">ncdump file.nc</code></p> </li> <li> <p>See only header of the data: <code class="language-plaintext highlighter-rouge">ncdump -c file.nc</code> (great for if you only want see the file information)</p> </li> <li> <p>Compress nc data by removing unlimited time dimension and make file smaller: <code class="language-plaintext highlighter-rouge">nccopy -u -s -d6 file.nc file_compressed.nc</code></p> </li> </ul> <h3 id="cdo">CDO</h3> <ul> <li> <p>Concatenate all nc files in a directory: <code class="language-plaintext highlighter-rouge">cdo cat *.nc merged_file.nc</code></p> </li> <li> <p>Shift Longitude of data from 0:360 to -180:180: <code class="language-plaintext highlighter-rouge">cdo sellonlatbox,-180,180,-90,90 input.nc output.nc</code></p> </li> <li> <p>Convert grib to nc: <code class="language-plaintext highlighter-rouge">cdo -f nc copy file.grb file.nc</code></p> </li> <li> <p>Merge datasets with the same number of timesteps and different variables in each dataset: <code class="language-plaintext highlighter-rouge">cdo merge infile1.nc infile2.nc infile3.nc outfile.nc</code></p> </li> <li> <p>Convert variable ts by subtraction from K to C: <code class="language-plaintext highlighter-rouge">cdo expr,’var1=ts-273.15;’ ifile.nc ofile.nc</code></p> </li> </ul> ]]></content><author><name>Abdullah Al Fahad</name></author><summary type="html"><![CDATA[This page contains simple commands that I use to handle NetCDF data in different tools. This page will be updated as I will stumble upon on to new commands.]]></summary></entry><entry><title type="html">Linear regression in python, across time dimension for every lat lon grid</title><link href="https://afahadabdullah.github.io/blog/2018/linreg_in_python/" rel="alternate" type="text/html" title="Linear regression in python, across time dimension for every lat lon grid"/><published>2018-10-13T00:00:00+06:00</published><updated>2018-10-13T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/linreg_in_python</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/linreg_in_python/"><![CDATA[<p>The function will take input variable with [time, lat, lon] dimensions and gives output as 2-dimensional trend [lat, lon] and the p-value of the trend [lat, lon]. We can also define a significance value in function input (i.e. 0.05). If we input the significance value, output linear trend will be still in 2 dimensions with nan values in insignificant grid points (i.e. lower than 95% ).</p> <p>Once we defined the function we can use it to calculate and plot the trend of a 3-dimensional variable [time, lat, lon]. For example, if we use annual mean sea level pressure era-interim reanalysis data of 39 years (1979-2016) to find a trend per year, we can use the script as:</p> <p>Download the script <a href="https://bit.ly/32gb81L">ltrend.py</a></p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">numpy</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">stats</span>
<span class="kn">from</span> <span class="n">netCDF4</span> <span class="kn">import</span> <span class="n">Dataset</span> <span class="k">as</span> <span class="n">nc</span>


<span class="k">def</span> <span class="nf">l_trend</span><span class="p">(</span><span class="n">var</span><span class="p">,</span><span class="n">lon</span><span class="p">,</span><span class="n">lat</span><span class="p">,</span><span class="n">time</span><span class="p">,</span><span class="n">sig</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">nlon</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">lon</span><span class="p">)</span>
    <span class="n">nlat</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">lat</span><span class="p">)</span>
    <span class="n">nt</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
    <span class="n">vart</span><span class="o">=</span><span class="nf">zeros</span><span class="p">(</span><span class="n">nlat</span><span class="o">*</span><span class="n">nlon</span><span class="p">)</span>
    <span class="n">varp</span><span class="o">=</span><span class="nf">zeros</span><span class="p">(</span><span class="n">nlat</span><span class="o">*</span><span class="n">nlon</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">var</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span><span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="n">var</span><span class="o">=</span><span class="nf">reshape</span><span class="p">(</span><span class="n">var</span><span class="p">,(</span><span class="n">nt</span><span class="p">,</span><span class="n">nlat</span><span class="o">*</span><span class="n">nlon</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'l_trend: assuming variable as 3D [time,lat,lon]'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">nlat</span><span class="o">*</span><span class="n">nlon</span><span class="p">):</span>
        <span class="n">v</span><span class="o">=</span><span class="n">var</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span>
        <span class="n">vart</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">intercept</span><span class="p">,</span> <span class="n">r_value</span><span class="p">,</span> <span class="n">varp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">std_err</span><span class="o">=</span><span class="n">stats</span><span class="p">.</span><span class="nf">linregress</span><span class="p">(</span><span class="n">time</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
    <span class="n">vart</span><span class="o">=</span><span class="nf">reshape</span><span class="p">(</span><span class="n">vart</span><span class="p">,(</span><span class="n">nlat</span><span class="p">,</span><span class="n">nlon</span><span class="p">))</span>
    <span class="n">varp</span><span class="o">=</span><span class="nf">reshape</span><span class="p">(</span><span class="n">varp</span><span class="p">,(</span><span class="n">nlat</span><span class="p">,</span><span class="n">nlon</span><span class="p">))</span>
<span class="c1">#return (vart,varp)
</span><span class="k">else</span><span class="p">:</span>
<span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="s">'Variable shape is not 2D or 3D. plese instert variable in this format var[time,lat,lon] or var[time,lon*lat]'</span><span class="p">)</span>
<span class="k">if</span> <span class="n">sig</span><span class="o">==</span><span class="bp">False</span><span class="p">:</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">vart</span><span class="p">,</span> <span class="n">varp</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">nlat</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range </span><span class="p">(</span><span class="n">nlon</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">varp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">sig</span><span class="p">:</span>
                <span class="n">vart</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">nan</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">vart</span><span class="p">,</span> <span class="n">varp</span><span class="p">)</span>


<span class="c1"># after reading the SLP file
</span>
<span class="nb">file</span><span class="o">=</span><span class="nf">nc</span><span class="p">(</span><span class="s">'/homes/afahad/data/slp_erai_1979_2017.nc'</span><span class="p">)</span>
<span class="n">slp</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'slp'</span><span class="p">][:]</span>
<span class="n">lon</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'lon'</span><span class="p">][:]</span>
<span class="n">lat</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'lat'</span><span class="p">][:]</span>
<span class="n">time</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'time'</span><span class="p">][:]</span>

<span class="c1"># dimension
</span>
<span class="n">nlon</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">lon</span><span class="p">)</span>
<span class="n">nlat</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">lat</span><span class="p">)</span>
<span class="n">ntime</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>

<span class="c1"># Here my SLP data is in monthly time dimension.
# I will take average over the months to make years
</span><span class="n">mo</span><span class="o">=</span><span class="mi">12</span>
<span class="n">yr</span><span class="o">=</span><span class="n">ntime</span><span class="o">//</span><span class="n">mo</span>
<span class="n">year</span><span class="o">=</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">1979</span><span class="p">,</span><span class="mi">2017</span><span class="p">,</span><span class="mi">39</span><span class="p">)</span>


<span class="n">slp</span><span class="o">=</span><span class="nf">reshape</span><span class="p">(</span><span class="n">slp</span><span class="p">,(</span><span class="n">yr</span><span class="p">,</span><span class="n">mo</span><span class="p">,</span><span class="n">nlat</span><span class="p">,</span><span class="n">nlon</span><span class="p">))</span>
<span class="n">slp</span><span class="o">=</span><span class="p">(</span><span class="nf">nanmean</span><span class="p">(</span><span class="n">slp</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mi">100</span> <span class="c1"># taking mean over month diension, and making Pa to hPa by dividing 100
</span>
<span class="c1"># Now lets calculate linear trend pr year
</span>
<span class="n">slp_trend</span><span class="p">,</span> <span class="n">slp_p</span><span class="o">=</span><span class="nf">l_trend</span><span class="p">(</span><span class="n">slp</span><span class="p">,</span><span class="n">lon</span><span class="p">,</span><span class="n">lat</span><span class="p">,</span><span class="n">year</span><span class="p">)</span></code></pre></figure> <p>Now if we plot the slp_trend hPa per year we get a plot like below:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/linreg1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/linreg1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/linreg1-1400.webp"/> <img src="/assets/img/linreg1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>If we want the show only 95% significance trend of grid points we can write the l_trend function as</p> <p><code class="language-plaintext highlighter-rouge">slp_trend, slp_p=l_trend(slp,lon,lat,year,sig=0.05)</code></p> <p>Slp_trend plot will be in this case:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/linreg2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/linreg2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/linreg2-1400.webp"/> <img src="/assets/img/linreg2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>For plotting climate variable in python using matplotlib</p>]]></content><author><name>Abdullah Al Fahad</name></author><summary type="html"><![CDATA[We will write a linear trend function for the 3-dimensional data set.]]></summary></entry><entry><title type="html">Plotting Climate data in Python using matplotlib</title><link href="https://afahadabdullah.github.io/blog/2018/plotting_climate_data/" rel="alternate" type="text/html" title="Plotting Climate data in Python using matplotlib"/><published>2018-10-12T00:00:00+06:00</published><updated>2018-10-12T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/plotting_climate_data</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/plotting_climate_data/"><![CDATA[<p>Using the same example as before, we will use sea level pressure (SLP) netcdf data to read and make a plot of annual mean SLP (globally). Most of the script line below is commented to show their purpose:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ploting_climate-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ploting_climate-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ploting_climate-1400.webp"/> <img src="/assets/img/ploting_climate.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">netCDF4</span> <span class="kn">import</span> <span class="n">Dataset</span> <span class="k">as</span> <span class="n">NetCDFFile</span> <span class="c1">#this package reads nc data
</span><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span> <span class="c1">#python plotting package
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span> <span class="c1">#numpy is for all scientific computing
</span><span class="kn">from</span> <span class="n">mpl_toolkits.basemap</span> <span class="kn">import</span> <span class="n">Basemap</span>  
<span class="c1">#Basemap package helps to plot lat lon dimension data
</span>
<span class="nf">print</span><span class="p">(</span><span class="s">'reading the file ..'</span><span class="p">)</span>

<span class="n">nc</span> <span class="o">=</span> <span class="nc">NetCDFFile</span><span class="p">(</span><span class="s">'/homes/afahad/data/slp_erai_1979_2016.nc'</span><span class="p">)</span> <span class="c1">#read the file
</span>
<span class="n">lat</span> <span class="o">=</span> <span class="n">nc</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'lat'</span><span class="p">][:]</span> <span class="c1">#this the data from file
</span><span class="n">lon</span> <span class="o">=</span> <span class="n">nc</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'lon'</span><span class="p">][:]</span>
<span class="n">time</span> <span class="o">=</span> <span class="n">nc</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'time'</span><span class="p">][:]</span>
<span class="n">mslp</span> <span class="o">=</span> <span class="n">nc</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'slp'</span><span class="p">][:]</span>
<span class="n">nc</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="s">'Making climatology...'</span><span class="p">)</span>

<span class="c1"># we will take average over time dimension, which is 0 (1st index index in #python)
</span>
<span class="n">a</span><span class="o">=</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">mslp</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span><span class="o">/</span><span class="mi">100</span> <span class="c1">#climatology of SLP
</span>
<span class="c1"># make some plot
</span><span class="nf">print</span><span class="p">(</span><span class="s">'Ploting...'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span> <span class="c1">#setting the figure size
</span>
<span class="nb">map</span> <span class="o">=</span> <span class="nc">Basemap</span><span class="p">(</span><span class="n">projection</span><span class="o">=</span><span class="s">'cyl'</span><span class="p">,</span><span class="n">llcrnrlat</span><span class="o">=-</span><span class="mi">90</span><span class="p">,</span><span class="n">urcrnrlat</span><span class="o">=</span><span class="mi">90</span><span class="p">,</span>\
            <span class="n">llcrnrlon</span><span class="o">=-</span><span class="mi">180</span><span class="p">,</span><span class="n">urcrnrlon</span><span class="o">=</span><span class="mi">180</span><span class="p">,</span><span class="n">resolution</span><span class="o">=</span><span class="s">'l'</span><span class="p">)</span>      
<span class="c1">#This like sets the lat lon of the plot. Projection cylinder.
</span>
<span class="nb">map</span><span class="p">.</span><span class="nf">drawcoastlines</span><span class="p">(</span><span class="n">linewidth</span><span class="o">=</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span>  <span class="c1">#draws coastline
</span>
<span class="n">parallels</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">90</span><span class="p">,</span><span class="mi">91</span><span class="p">,</span><span class="mf">30.</span><span class="p">)</span> <span class="c1"># make latitude lines ever 30 degrees from 30N-50N
</span><span class="n">meridians</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">180</span><span class="p">,</span><span class="mi">180</span><span class="p">,</span><span class="mf">60.</span><span class="p">)</span> <span class="c1"># make longitude lines every 60 degrees from 95W to 70W
</span>
<span class="c1">#labelling the lat and lon dimesion
</span>
<span class="nb">map</span><span class="p">.</span><span class="nf">drawparallels</span><span class="p">(</span><span class="n">parallels</span><span class="p">,</span><span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="n">linewidth</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="nb">map</span><span class="p">.</span><span class="nf">drawmeridians</span><span class="p">(</span><span class="n">meridians</span><span class="p">,</span><span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">linewidth</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>

<span class="n">lons</span><span class="p">,</span><span class="n">lats</span><span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">meshgrid</span><span class="p">(</span><span class="n">lon</span><span class="p">,</span><span class="n">lat</span><span class="p">)</span> <span class="c1">#2D lat lon to plot contours
</span><span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="n">lons</span><span class="p">,</span><span class="n">lats</span><span class="p">)</span>

<span class="n">clevsf</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">960</span><span class="p">,</span><span class="mi">1040</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="n">clevs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1020</span><span class="p">,</span><span class="mi">1040</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>

<span class="c1">#clevs and clevsf sets the contour interval of contour and filled contour. if you don't set it, it will plot default values.
</span>
<span class="n">csf</span> <span class="o">=</span> <span class="nb">map</span><span class="p">.</span><span class="nf">contourf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">clevsf</span><span class="p">,</span><span class="n">extend</span><span class="o">=</span><span class="s">'both'</span><span class="p">,</span><span class="n">cmap</span><span class="o">=</span><span class="s">'coolwarm'</span><span class="p">)</span> <span class="c1">#filled contour
</span><span class="n">cb</span> <span class="o">=</span> <span class="nb">map</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">csf</span><span class="p">,</span><span class="s">"right"</span><span class="p">,</span> <span class="n">extend</span><span class="o">=</span><span class="s">'both'</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="s">"3%"</span><span class="p">,</span> <span class="n">pad</span><span class="o">=</span><span class="s">"1%"</span><span class="p">)</span>
<span class="n">cs</span> <span class="o">=</span> <span class="nb">map</span><span class="p">.</span><span class="nf">contour</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">clevs</span><span class="p">,</span><span class="n">colors</span><span class="o">=</span><span class="s">'k'</span><span class="p">,</span><span class="n">linewidths</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">clabel</span><span class="p">(</span><span class="n">cs</span><span class="p">,</span> <span class="n">inline</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fmt</span><span class="o">=</span><span class="s">'%1.0f'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'k'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="s">'mean SLP'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="s">'test_slp.eps'</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s">'eps'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span> <span class="c1">#saving figure
</span>
<span class="nf">print</span><span class="p">(</span><span class="s">'done! To see the plot, type: display test_slp.eps'</span><span class="p">)</span></code></pre></figure> <p>Install matplotlib if you are not using anaconda:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">pip</span> <span class="n">setuptools</span>
<span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">matplotlib</span></code></pre></figure> <p>fore more: <a href="https://matplotlib.org/faq/installing_faq.html">https://matplotlib.org/faq/installing_faq.html</a></p> <p>If you are using anaconda 3 like me, to install packages follow: How to read netcdf file in Python</p>]]></content><author><name>Abdullah Al Fahad</name></author><summary type="html"><![CDATA[Using the same example as before, we will use sea level pressure (SLP) netcdf data to read and make a plot of annual mean SLP (globally). Most of the script line below is commented to show their purpose:]]></summary></entry><entry><title type="html">How to read netCDF file in Python</title><link href="https://afahadabdullah.github.io/blog/2018/how_to_read_nc_file_in_python/" rel="alternate" type="text/html" title="How to read netCDF file in Python"/><published>2018-10-02T00:00:00+06:00</published><updated>2018-10-02T00:00:00+06:00</updated><id>https://afahadabdullah.github.io/blog/2018/how_to_read_nc_file_in_python</id><content type="html" xml:base="https://afahadabdullah.github.io/blog/2018/how_to_read_nc_file_in_python/"><![CDATA[<p>NetCDF (nc) file format is a widely used data format in Geo, Earth, and planetary science field. To import nc data to python workspace, we will need to install a necdf4 package in python. Depending on your python software tool search online on how to install package for that specific python tool. If you are using anaconda3 like I just follow the instructing below:</p> <p>open Anaconda &gt; Go to Environment &gt; click in search package and write netcdf4 &gt; click check button to install netcdf4 package.</p> <p>After installing the package open the python terminal (I use spyder/ipython terminal) and follow the script:</p> <p><code class="language-plaintext highlighter-rouge">from netCDF4 import Dataset as nc</code> #this line imports the package we just installed</p> <p><code class="language-plaintext highlighter-rouge">file=nc('/Users/afahad/Desktop/slp.mon.mean.nc')</code> # this line defines the file path of the file we are trying to read</p> <p>#read variable</p> <p><code class="language-plaintext highlighter-rouge">slp=file.variables['slp'][:]</code> # “:” takes all the data dimension from the file</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">lon</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'lon'</span><span class="p">][:]</span>
<span class="n">lat</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'lat'</span><span class="p">][:]</span>
<span class="n">time</span><span class="o">=</span><span class="nb">file</span><span class="p">.</span><span class="n">variables</span><span class="p">[</span><span class="s">'time'</span><span class="p">][:]</span></code></pre></figure> <p>To make sure if your data dimensions are right you can type the following commands and check if they match:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">slp</span><span class="p">.</span><span class="n">shape</span>
<span class="n">lon</span><span class="p">.</span><span class="n">shape</span>
<span class="n">lat</span><span class="p">.</span><span class="n">shape</span>
<span class="n">time</span><span class="p">.</span><span class="n">shape</span></code></pre></figure> <p>Install anaconda: <a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p> <p>Alternatively, you can use rnc function from aoespy toolbox to read as in one line as:</p> <p><code class="language-plaintext highlighter-rouge">slp=rnc('slp','/Users/afahad/Desktop/slp.mon.mean.nc')</code></p> <p>AOESPY toolbox link: <a href="https://github.com/afahadabdullah/AOESpy">Click here</a></p>]]></content><author><name>Abdullah Al Fahad</name></author><summary type="html"><![CDATA[NetCDF (nc) file format is a widely used data format in Geo, Earth, and planetary science field. To import nc data to python workspace, we will need to install a necdf4 package in python. Depending on your python software tool search online on how to install package for that specific python tool. If you are using anaconda3 like I just follow the instructing below:]]></summary></entry></feed>